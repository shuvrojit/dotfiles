# # lf settings
# # github.com/rafi/.config

# set shell bash
# set shellopts '-eu'
# set ifs "\n"

# # set color256
# set icons
# set hidden
# set incsearch
# set scrolloff 4
# set tabstop 2
# set smartcase
# set dircounts
# set info size
# set sortby natural
# set ratios '1:2:3'
# set timefmt '2006-01-02 15:04:05 -0700'
# set previewer ~/.config/lf/preview

# # Secure logs and socket
# # ${{
# # 	if [ -S "${TMPDIR:-/tmp/}lf.${USER}.sock" ]; then
# # 		chmod o-rwx "${TMPDIR:-/tmp/}lf.${USER}."*
# # 	fi
# # }}

# # keyboard mappings
# # ---

# # open machanisms
# map <enter> open
# map E &$OPENER $f
# map oz $mimeopen --ask $f
# map O $mimeopen --ask-default $f

# # general utilities
# # ---
# map i $LESS='-iWQMXR~' bat --paging=always --theme=TwoDark "$f"
# map I push A<c-a>
# map A rename
# map D trash
# map H cd ..
# map . set hidden!

map ; !rar a "${PWD##*/}".cbr *
map e !emacs $f
map bz !unzip "$f" 
map br !unrar e "$f"

# # create directory/file
# map ad push $mkdir<space>
# map af push $touch<space>
# map au !du -hsx * | sort -rh | less
# map ai !gstat $f || stat $f; echo ; du -sh $f ; echo ; file -I -b -p $f

# # Quickly locate a file with fzf and select it in lf
# map gf $lf -remote "send $id select $(fzf)"

# # map <esc> unselect; clear
# map zz push :z<space>

# map sn :{{ set sortby natural; set info size; set preview; }}
# map sa :{{ set sortby natural; set info size; set nopreview; set ratios 3:5; }}
# map ss :{{ set sortby size; set info size; set preview; }}
# map st :{{ set sortby time; set info time; set preview; }}

# # Tmux
# map sg &tmux split-window -h lf
# map sv &tmux split-window -v lf

# # show documentation
# map g? $lf -doc | less

# # beyond compare selected files/directories
# map = &bcompare $fx

# # execute current file (must be executable)
# map x delete $$f
# # map X !$f

# # directory aliases
# map gv cd ~/.config/nvim
# map gc cd ~/.config
# map gp cd ~/code
# map gdl cd ~/dl
# map gdo cd ~/docs
# map ge cd /etc
# map gm cd /mnt
# map go cd /opt
# map g/ cd /
# map g~ cd ~

# # waiting for https://github.com/gokcehan/lf/issues/111
# # cmap <c-right> cmd-word
# # cmap <c-left> cmd-word-back

# # commands
# # ---

# cmd mkdir %[ -n "${1}" ] && mkdir -p ${@} || echo "Argument needed"
# cmd mkfile %[ -n "${1}" ] && touch ${@} || echo "Argument needed"

# # Implement trash command
# cmd trash ${{
# 	set -f
# 	if hash trash-put 2>/dev/null; then
# 		trash-put -v -- $fx
# 	else
# 		mkdir -p "$HOME"/.trash
# 		mv -vi $fx "$HOME"/.trash
# 	fi
# }}

# # Replace open command with robust selection of openers
# cmd open ${{
# 	case $(file --dereference --mime-type $f -b) in
# 		inode/x-empty) $EDITOR $fx ;;
# 		text/*) $EDITOR $fx;;
# 		video/*) nohup mpv $fx > /dev/null & ;;
# 		audio/*) nohup mpv $fx > /dev/null & ;;
# 		audio/midi) timidity $fx ;;
# 		application/epub+zip) nohup FBReader $f > /dev/null & ;;
# 		application/pdf) nohup zathura $f > /dev/null & ;;
# 		*) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
# 	esac
# }}

# # replace paste command with rsync and progress display
# # cmd paste &{{
# # 	load=$(lf -remote 'load')
# # 	mode=$(echo "$load" | sed -n '1p')
# # 	list=$(echo "$load" | sed '1d')
# # 	if [ $mode = 'copy' ]; then
# # 		rsync -avh --ignore-existing --progress $list . \
# # 			| stdbuf -i0 -o0 -e0 tr '\r' '\n' \
# # 			| while read line; do
# # 				echo "$line"
# # 				lf -remote "send $id echo $line"
# # 			done
# # 	elif [ $mode = 'move' ]; then
# # 		mv -i $list .
# # 	fi
# # 	lf -remote 'send load'
# # 	lf -remote 'send clear'
# # }}

# # quickly cd into frecent directories using zoxide, zlua or rupa/z
# cmd z ${{
# 	set +u
# 	dest=''
# 	prefix=''
# 	[[ "$OSTYPE" == "darwin"* ]] && prefix='/usr/local'
# 	if hash zoxide 2>/dev/null; then
# 		dest="$(zoxide query "$@")"
# 	# See: https://github.com/skywind3000/z.lua
# 	elif [ -f "$prefix/etc/profile.d/z.lua" ]; then
# 		export _ZL_NO_PROMPT_COMMAND=1
# 		dest="$(lua "$prefix/etc/profile.d/z.lua" -e "$@")"
# 	# See https://github.com/rupa/z
# 	elif [ -f "$prefix/etc/profile.d/z.sh" ] || [ -f "$prefix/share/z/z.sh"]; then
# 		export _Z_NO_PROMPT_COMMAND=1
# 		source "$prefix/etc/profile.d/z.sh" || source "$prefix/share/z/z.sh"
# 		dest="$(_z "$@" && pwd)"
# 	fi

# 	if test -n "${dest}"; then
# 		lf -remote "send $id cd '${dest}'"
# 	else
# 		lf -remote "send $id echo 'Invalid directory ${dest}'"
# 	fi
# }}

# cmd fzf_z ${{
# 	sel="$(zoxide query -l | fzf +s)"
# 	[ -d "$sel" ] && lf -remote "send $id cd \"$sel\""
# }}

# # cmd on-cd &{{
# # 	zoxide add "$PWD"
# # }}
# # on-cd

# # dynamically set info displayed based on the number of columns
# cmd resize %{{
# 	# w=$(tmux display-message -p '#{width}' || tput cols)
# 	w=$(tput cols)
# 	if [ $w -le 60 ]; then
# 		lf -remote "send $id set ratios 1"
# 		lf -remote "send $id set nopreview"
# 	elif [ $w -le 80 ]; then
# 		lf -remote "send $id set ratios 2:2"
# 	elif [ $w -le 100 ]; then
# 		lf -remote "send $id set ratios 1:2:3"
# 	else
# 		lf -remote "send $id set ratios 1:2:5"
# 	fi
# 	lf -remote "send $id echo 'ui adjusted for width of $w'"
# }}

# # cmd on-cd &{{
# # 	fmt=$(starship prompt)
# # 	lf -remote "send $id set promptfmt \"$fmt\""
# # }}
# # on-cd

# # Preserve navigation stack history for each client
# # map H go-back
# # 
# # &{{
# # 	[ -d "$XDG_DATA_HOME/lf" ] || mkdir -p "$XDG_DATA_HOME/lf"
# # 	pwd > "$XDG_DATA_HOME/lf/dir-stack.$id"
# # }}
# # 
# # cmd on-cd &{{
# # 	SKIP="`cat $XDG_DATA_HOME/lf/dir-skip.$id || echo 0`"
# # 	if [ "$SKIP" = "1" ]; then
# # 		if [[ "$OSTYPE" == "darwin"* ]]; then
# # 			# macOS BSD sed
# # 			sed -i '' -e '$ d' "$XDG_DATA_HOME/lf/dir-stack.$id"
# # 		else
# # 			# Linux sed
# # 			sed -i '$ d' "$XDG_DATA_HOME/lf/dir-stack.$id"
# # 		fi
# # 	else
# # 		pwd >> "$XDG_DATA_HOME/lf/dir-stack.$id"
# # 	fi
# # 	echo 0 > "$XDG_DATA_HOME/lf/dir-skip.$id"
# # }}
# # 
# # cmd go-back ${{
# # 	echo 1 > "$XDG_DATA_HOME/lf/dir-skip.$id"
# # 	last_dir="$(tail -1 $XDG_DATA_HOME/lf/dir-stack.$id)"
# # 	lf -remote "send $id cd \"$last_dir\""
# # }}

# #  vim: set ts=2 sw=2 tw=80 noet :

map x delete !$f
# map X !$f


# ## lukes
# # Luke's lf settings


# # Note on Image Previews
# # For those wanting image previews, like this system, there are four steps to
# # set it up. These are done automatically for LARBS users, but I will state
# # them here for others doing it manually.
# #
# # 1. ueberzug must be installed.
# # 2. The scope file (~/.config/lf/scope for me), must have a command similar to
# #    mine to generate ueberzug images.
# # 3. A `set cleaner` line as below is a cleaner script.
# # 4. lf should be started through a wrapper script (~/.local/bin/lfub for me)
# #    that creates the environment for ueberzug. This command can be be aliased
# #    in your shellrc (`alias lf="lfub") or if set to a binding, should be
# #    called directly instead of normal lf.

# # Basic vars
# set shellopts '-eu'
# set ifs "\n"
# set scrolloff 10
# set icons
# set period 1
# set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
# set cleaner '~/.config/lf/cleaner'
# set previewer '~/.config/lf/scope'
# set autoquit on

# # cmds/functions
# cmd open ${{
#     case $(file --mime-type "$(readlink -f $f)" -b) in
# 	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
# 	image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) setsid -f zathura $fx >/dev/null 2>&1 ;;
#         text/*|application/json|inode/x-empty) $EDITOR $fx;;
# 	image/x-xcf) setsid -f gimp $f >/dev/null 2>&1 ;;
# 	image/svg+xml) display -- $f ;;
# 	image/*) rotdir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" |
# 		setsid -f sxiv -aio 2>/dev/null | while read -r file; do
# 			[ -z "$file" ] && continue
# 			lf -remote "send select \"$file\""
# 			lf -remote "send toggle"
# 		done &
# 		;;
# 	audio/*) mpv --audio-display=no $f ;;
# 	video/*) setsid -f mpv $f -quiet >/dev/null 2>&1 ;;
# 	application/pdf|application/vnd*|application/epub*) setsid -f zathura $fx >/dev/null 2>&1 ;;
# 	application/pgp-encrypted) $EDITOR $fx ;;
# 	application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text) setsid -f lowriter $fx >/dev/null 2>&1 ;;
# 	application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template) setsid -f localc $fx >/dev/null 2>&1 ;;
# 	application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint) setsid -f loimpress $fx >/dev/null 2>&1 ;;
# 	application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template) setsid -f lodraw $fx >/dev/null 2>&1 ;;
# 	application/vnd.oasis.opendocument.formula) setsid -f lomath $fx >/dev/null 2>&1 ;;
# 	application/vnd.oasis.opendocument.database) setsid -f lobase $fx >/dev/null 2>&1 ;;
#         *) for f in $fx; do setsid -f $OPENER $f >/dev/null 2>&1; done;;
#     esac
# }}

# cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

# cmd extract ${{
# 	clear; tput cup $(($(tput lines)/3)); tput bold
# 	set -f
# 	printf "%s\n\t" "$fx"
# 	printf "extract?[y/N]"
# 	read ans
# 	[ $ans = "y" ] && aunpack $fx
# }}

# cmd delete ${{
# 	clear; tput cup $(($(tput lines)/3)); tput bold
# 	set -f
# 	printf "%s\n\t" "$fx"
# 	printf "delete?[y/N]"
# 	read ans
# 	[ $ans = "y" ] && rm -rf -- $fx
# }}

# cmd moveto ${{
# 	clear; tput cup $(($(tput lines)/3)); tput bold
# 	set -f
# 	clear; echo "Move to where?"
# 	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
# 	for x in $fx; do
# 		eval mv -iv \"$x\" \"$dest\"
# 	done &&
# 	notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
# }}

# cmd copyto ${{
# 	clear; tput cup $(($(tput lines)/3)); tput bold
# 	set -f
# 	clear; echo "Copy to where?"
# 	dest="$(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf | sed 's|~|$HOME|')" &&
# 	for x in $fx; do
# 		eval cp -ivr \"$x\" \"$dest\"
# 	done &&
# 	notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
# }}

# cmd setbg "$1"
# cmd bulkrename $vidir

# # Bindings
# map <c-f> $lf -remote "send $id select \"$(fzf)\""
# map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
# map gh
# map g top
# map D delete
# map E extract
# map C copyto
# map M moveto
# map <c-n> push :mkdir<space>
# map <c-r> reload
# map <c-s> set hidden!
# map <enter> shell
# map x $$f
# map X !$f
# map o &mimeopen $f
# map O $mimeopen --ask $f

# map A rename # at the very end
# map c push A<c-u> # new rename
# map I push A<c-a> # at the very beginning
# map i push A<a-b><a-b><a-f> # before extension
# map a push A<a-b> # after extension
# map B bulkrename
# map b $setbg $f

# map <c-e> down
# map <c-y> up
# map V push :!nvim<space>

# map W $setsid -f $TERMINAL >/dev/null 2>&1

# map Y $printf "%s" "$fx" | xclip -selection clipboard

# # Source Bookmarks
# #source "~/.config/lf/shortcutrc"
